import requests
from bs4 import BeautifulSoup
import time
import os
import json
from datetime import datetime

NEWS_SOURCES = [
    "https://www.mavcsoport.hu",
    "https://www.mavcsoport.hu/mavinform",
    "https://www.mavcsoport.hu/mavinform?field_mavinform_tags_target_id%5B%5D=10835&title=",
    "https://www.mavcsoport.hu/mavinform?field_mavinform_tags_target_id%5B%5D=10837&title=",
]

SEARCH_KEYWORDS = [
    "gy≈ëri",
    "Gy≈ër",
    "az 1-es",
    "hegyeshalom",
    "S10",
    "G10",
    "kelenf√∂ldi",
    "tatab√°nyai",
    "Tatab√°nya",
    "Oroszl√°ny",
    "oroszl√°nyi",
]

DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/XXX/YYY"
CHECK_INTERVAL_SECONDS = 30 * 60
SENT_LINKS_FILE_PATH = "/data/sent_links.json"

def select_emoji_for_news(text: str) -> str:
    lowercase_text = text.lower()
    if any(word in lowercase_text for word in ["k√©s√©s", "v√°rakoz√°s"]):
        return "‚è∞"
    elif any(word in lowercase_text for word in ["p√≥tl√≥busz", "v√°g√°nyz√°r", "lez√°r√°s", "√°t√©p√≠t√©s"]):
        return "üöå"
    elif any(word in lowercase_text for word in ["m≈±szaki", "hiba", "meghib√°sod√°s", "√°ramsz√ºnet"]):
        return "üîß"
    elif any(word in lowercase_text for word in ["karbantart√°s", "jav√≠t√°s"]):
        return "üß∞"
    elif any(word in lowercase_text for word in ["helyre√°ll", "helyre√°llt"]):
        return "‚úÖ"
    else:
        return "üöÜ"


def load_sent_links() -> set[str]:
    if os.path.exists(SENT_LINKS_FILE_PATH):
        with open(SENT_LINKS_FILE_PATH, "r", encoding="utf-8") as file:
            return set(json.load(file))
    return set()

def save_sent_links(sent_links: set[str]) -> None:
    with open(SENT_LINKS_FILE_PATH, "w", encoding="utf-8") as file:
        json.dump(list(sent_links), file, ensure_ascii=False, indent=2)

def fetch_news_articles() -> list[tuple[str, str, str]]:
    """
    Visszaadja a tal√°lt h√≠reket (URL, c√≠m, forr√°s)
    """
    collected_articles = []

    lower_keywords = [kw.lower() for kw in SEARCH_KEYWORDS]

    for source_url in NEWS_SOURCES:
        try:
            headers = {"User-Agent": "Mozilla/5.0"}
            response = requests.get(source_url, headers=headers, timeout=15)
            soup = BeautifulSoup(response.text, "html.parser")

            for link_tag in soup.find_all("a"):
                article_url = link_tag.get("href")
                article_title = link_tag.get_text().strip()

                if not article_url or not article_title:
                    continue
                    
                lower_title = article_title.lower()

                if any(keyword in lower_title for keyword in lower_keywords):
                    if article_url.startswith("/"):
                        article_url = "https://www.mavcsoport.hu" + article_url

                    source_label = "M√ÅVINFORM" if "mavinform" in source_url else "M√ÅV h√≠rek"
                    collected_articles.append((article_url, article_title, source_label))

        except Exception as error:
            print(f"‚ö†Ô∏è Hiba a lek√©r√©sn√©l: {source_url} ‚Üí {error}")

    return collected_articles

def post_news_to_discord(article_url: str, article_title: str, source_label: str) -> bool:
    emoji = select_emoji_for_news(article_title)
    embed_title = f"{emoji} M√ÅV / Forgalmi inform√°ci√≥"
    short_description = article_title if len(article_title) <= 150 else article_title[:147] + "..."

    embed_message = {
        "title": embed_title,
        "description": f"{short_description}\n\nüîó [R√©szletek itt]({article_url})",
        "color": 0xE67E22,
        "timestamp": datetime.utcnow().isoformat(),
        "footer": {"text": f"Forr√°s: {source_label} | M√ÅV h√≠rek figyel≈ë"},
    }

    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json={"embeds": [embed_message]})
        return response.status_code in (200, 204)
    except Exception as e:
        print(f"‚ùå Hiba a Discord k√ºld√©sn√©l: {e}")
        return False

def run_news_monitor() -> None:
    sent_links = load_sent_links()

    while True:
        try:
            fetched_articles = fetch_news_articles()

            for article_url, article_title, source_label in fetched_articles:
                if article_url not in sent_links:
                    success = post_news_to_discord(article_url, article_title, source_label)
                    if success:
                        print(f"‚úÖ K√ºldve: {article_title} ({article_url})")
                        sent_links.add(article_url)

            save_sent_links(sent_links)

        except Exception as error:
            print(f"‚ùå Hiba a feldolgoz√°s sor√°n: {error}")

        print(f"‚è≥ K√∂vetkez≈ë ellen≈ërz√©s {CHECK_INTERVAL_SECONDS // 60} perc m√∫lva...")
        time.sleep(CHECK_INTERVAL_SECONDS)


if __name__ == "__main__":
    run_news_monitor()
